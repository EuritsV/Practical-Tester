# Cap√≠tulo 11: Application of Testing Techniques (PO-9)

## üéØ Objetivo Principal
O objetivo do PO-9 √© integrar as t√©cnicas de teste aprendidas desde PO-1 at√© PO-8, equipando-o para aplicar estas t√©cnicas de forma abrangente e simult√¢nea a um Sistema em Teste (SUT), melhorando a capacidade de descobrir uma maior variedade de defeitos e garantir a confiabilidade do sistema.

## üß± Revis√£o das T√©cnicas de Teste (PO-1 a PO-8)

| T√©cnica | Descri√ß√£o | Quando √© Mais Eficaz |
|---------|-----------|---------------------|
| **Equivalence Partitioning (PO-1)** | Divide os dados de entrada em parti√ß√µes que devem exibir comportamento similar. Apenas um valor representativo de cada parti√ß√£o √© testado. | Quando se pode categorizar dados de entrada em conjuntos que devem comportar-se identicamente, reduzindo o n√∫mero de casos de teste mantendo a cobertura. |
| **Boundary Value Analysis (PO-2)** | Foca nos valores nas bordas de cada parti√ß√£o de equival√™ncia. Como erros s√£o frequentemente encontrados nas bordas dos intervalos de entrada, esta t√©cnica testa estes valores limite. | Para identificar erros nos limites entre parti√ß√µes, que s√£o locais comuns para bugs. |
| **Decision Tables (PO-3)** | M√©todo usado para fun√ß√µes que respondem a uma combina√ß√£o de entradas ou eventos. Envolve criar uma tabela que cobre todas as combina√ß√µes poss√≠veis de condi√ß√µes e a√ß√µes correspondentes. | Especialmente √∫til quando se lida com regras de neg√≥cio complexas ou rela√ß√µes l√≥gicas que afetam decis√µes da aplica√ß√£o. |
| **State Transition (PO-4)** | Testa as transi√ß√µes entre diferentes estados numa aplica√ß√£o, usando um diagrama de transi√ß√£o de estados para modelar os v√°rios estados e os triggers que resultam em transi√ß√µes. | Melhor para aplica√ß√µes onde √© necess√°rio verificar respostas adequadas a sequ√™ncias de eventos, especialmente em sistemas como processos de login ou qualquer m√°quina baseada em estados. |
| **Test Case Prioritization (PO-5)** | Envolve ordenar casos de teste de modo que aqueles com maior impacto ou probabilidade de encontrar defeitos sejam executados primeiro. | √ötil para reduzir tempo de testes de regress√£o ou quando os testes est√£o sob restri√ß√µes de tempo, garantindo que funcionalidades cr√≠ticas sejam testadas primeiro. |
| **ATDD (PO-6)** | Envolve membros de v√°rias disciplinas (desenvolvimento, teste, stakeholders de neg√≥cio) definindo crit√©rios de aceita√ß√£o e criando testes de aceita√ß√£o antes do desenvolvimento come√ßar. | Altamente eficaz para alinhar o trabalho de desenvolvimento com necessidades de neg√≥cio e garantir que todos os stakeholders tenham uma compreens√£o clara dos requisitos. |
| **Defect Report (PO-7)** | Foca nas compet√™ncias necess√°rias para reportar defeitos encontrados durante os testes de forma precisa e eficaz. | Essencial para garantir que defeitos sejam comunicados √†s equipas de desenvolvimento de forma a acelerar corre√ß√µes, melhorando a qualidade e confiabilidade da aplica√ß√£o. |
| **Estimation Techniques (PO-8)** | T√©cnicas usadas para estimar o esfor√ßo e recursos necess√°rios para atividades de teste. | Cr√≠tico para planeamento e aloca√ß√£o de recursos, ajudando a gerir tempo e expectativas ao longo do ciclo de vida dos testes. |

## üß≠ Sele√ß√£o de T√©cnicas

### Processo de An√°lise do SUT
1. **An√°lise das Caracter√≠sticas**
   - Revisar funcionalidade, complexidade e tipos de intera√ß√µes do utilizador
   - Considerar o dom√≠nio da aplica√ß√£o (financeiro, sa√∫de, software de consumo)
   - Diferentes dom√≠nios podem favorecer certas t√©cnicas devido a cen√°rios regulamentares ou casos de uso t√≠picos

2. **Correla√ß√£o com T√©cnicas**
   - **Regras de neg√≥cio complexas** ‚Üí **Decision Tables** s√£o particularmente eficazes
   - **Aplica√ß√µes web com v√°rias entradas de utilizador** ‚Üí **Equivalence Partitioning** e **Boundary Value Analysis**
   - **Sistemas com sequ√™ncias de eventos ou mudan√ßas de estado** ‚Üí **State Transition** testing
   - **Projetos com restri√ß√µes de tempo** ‚Üí **Test Case Prioritization**

## üè¶ Exemplo Pr√°tico: Sistema Banc√°rio Online

### Descri√ß√£o do Sistema em Teste (SUT)

#### Vis√£o Geral da Funcionalidade:
- **Autentica√ß√£o de Utilizador**: Permite aos utilizadores fazer login com username e password
- **Gest√£o de Conta**: Utilizadores podem ver saldo da conta, transa√ß√µes recentes e gerir defini√ß√µes da conta
- **Transfer√™ncia de Fundos**: Utilizadores podem transferir fundos entre as suas pr√≥prias contas ou para contas de outros utilizadores dentro do mesmo banco
- **Pagamento de Contas**: Utilizadores podem pagar contas diretamente das suas contas para benefici√°rios registados

#### Tipos de Utilizador:
- **Utilizador Regular**: Tem acesso a funcionalidades b√°sicas como ver detalhes da conta e transferir fundos
- **Utilizador Admin**: Al√©m das capacidades de utilizador regular, pode gerir contas de utilizador e ajustar defini√ß√µes do sistema

#### Funcionalidades Especiais:
- **Autentica√ß√£o Multi-Factor (MFA)**: Obrigat√≥ria para completar transa√ß√µes financeiras
- **Limites de Transa√ß√£o**: Existem limites di√°rios e transacionais baseados no tipo de conta e defini√ß√µes do utilizador

### Aplica√ß√£o Combinada das T√©cnicas

#### **Passo 1: Revis√£o das T√©cnicas de Teste**
Come√ßamos por revisar t√©cnicas como Equivalence Partitioning, Boundary Value Analysis, Decision Table Testing, State Transition e Test Case Prioritization dos PO-1 a PO-8.

#### **Passo 2: Sele√ß√£o de T√©cnicas**
- **Equivalence Partitioning**: √ötil para testar funcionalidade de login particionando dados de entrada em credenciais v√°lidas e inv√°lidas
- **Boundary Value Analysis**: Eficaz para testar casos extremos de limites de transa√ß√£o
- **Decision Table Testing**: Ideal para testar v√°rias combina√ß√µes de defini√ß√µes de conta e tipos de transa√ß√£o
- **State Transition**: Crucial para testar mudan√ßas no estado da conta ap√≥s v√°rias tentativas de transa√ß√£o, tanto falhadas como bem-sucedidas

#### **Passo 3: Desenvolvimento de Casos de Teste Integrados**

##### **Caso de Teste 1: Funcionalidade de Login**
- Usar **Equivalence Partitioning** para criar casos de teste para diferentes tipos de utilizador com cen√°rios de entrada v√°lidos e inv√°lidos
- Aplicar **Boundary Value Analysis** para testar a resposta a comprimentos m√≠nimos e m√°ximos de entrada para username e password

##### **Caso de Teste 2: Transfer√™ncia de Fundos**
- Usar **Decision Table Testing** para avaliar diferentes cen√°rios de transfer√™ncia: dentro das contas do utilizador, para contas externas, com ou sem exceder limites di√°rios
- **State Transition** testing para verificar estado da conta ap√≥s transfer√™ncias bem-sucedidas e mal-sucedidas, incluindo testar o passo MFA

##### **Caso de Teste 3: Pagamento de Contas**
- Combina√ß√£o de **Equivalence Partitioning** (para diferentes contas de benefici√°rios) e **Boundary Value Analysis** (para campos de montante perto dos limites superiores e inferiores)

#### **Passo 4: Implementa√ß√£o de Cen√°rios de Teste**
Executar os casos de teste desenhados, focando nos pontos de integra√ß√£o entre funcionalidades, como a liga√ß√£o entre login e autoriza√ß√£o de transa√ß√£o.

## üîÑ Execu√ß√£o e Monitoriza√ß√£o

### Estrat√©gia de Execu√ß√£o
1. **Prioriza√ß√£o** usando Test Case Prioritization para casos cr√≠ticos
2. **Foco em pontos de integra√ß√£o** entre diferentes funcionalidades
3. **Monitoriza√ß√£o cont√≠nua** dos resultados e ajuste da estrat√©gia conforme necess√°rio
4. **Documenta√ß√£o** de defeitos usando t√©cnicas do PO-7

### Benef√≠cios da Abordagem Combinada
- **Cobertura Abrangente**: Diferentes t√©cnicas cobrem diferentes aspectos do sistema
- **Efici√™ncia Melhorada**: Redu√ß√£o de redund√¢ncia atrav√©s da sele√ß√£o estrat√©gica de t√©cnicas
- **Dete√ß√£o de Defeitos Aumentada**: Maior probabilidade de encontrar defeitos atrav√©s de m√∫ltiplas perspectivas
- **Confiabilidade do Sistema**: Teste mais robusto resulta em maior confian√ßa na qualidade do software

---

# Cap√≠tulo 12: Plano de Testes (PO-10)

## üéØ Objetivo Principal do PO-10
Aprender a criar um plano de testes completo e padronizado, seguindo as diretrizes da norma **IEEE 29119-3:2021**. Um plano de testes √© o guia estrat√©gico que define como o processo de teste ser√° realizado, servindo como documento fundamental para coordenar todas as atividades de teste.

## üß± Componentes de um Plano de Testes (IEEE 29119-3:2021)

### üîπ Se√ß√µes Obrigat√≥rias

| Se√ß√£o | Fun√ß√£o | Descri√ß√£o Detalhada |
|-------|--------|---------------------|
| **1. Introdu√ß√£o** | Define o objetivo do plano de testes e o contexto do sistema | Estabelece o prop√≥sito do documento e fornece contexto sobre o sistema a ser testado |
| **2. Vis√£o Geral** | Resume os objetivos, o escopo e informa√ß√µes-chave sobre os testes | Apresenta uma s√≠ntese executiva dos principais aspetos do plano |
| **3. Itens de Teste** | Lista as funcionalidades ou componentes a serem testados | Especifica claramente o que ser√° inclu√≠do no √¢mbito dos testes |
| **4. Entreg√°veis** | Define o que ser√° produzido durante os testes | Casos de teste, relat√≥rios, scripts automatizados, documenta√ß√£o |
| **5. Estrat√©gia de Teste** | Explica como os testes ser√£o conduzidos | N√≠veis de teste, tipos de teste, ambientes, metodologias |
| **6. Cronograma** | Planeamento de atividades e marcos importantes | Timeline detalhado com marcos cr√≠ticos e depend√™ncias |
| **7. Recursos Necess√°rios** | Pessoas, ferramentas e ambientes necess√°rios para testar | Especifica√ß√£o completa de recursos humanos e t√©cnicos |
| **8. Crit√©rios de Entrada/Sa√≠da** | Define quando iniciar, continuar ou encerrar os testes | Condi√ß√µes objetivas para controlo do processo de teste |

### üî∏ Se√ß√µes Opcionais

| Se√ß√£o | Quando Usar | Descri√ß√£o |
|-------|-------------|-----------|
| **Funcionalidades a testar/n√£o testar** | Quando √© necess√°rio delimitar escopo claramente | Ajuda a estabelecer fronteiras claras do que est√° inclu√≠do/exclu√≠do |
| **Documentos de refer√™ncia** | Quando h√° especifica√ß√µes, requisitos ou pol√≠ticas externas | Lista de documentos que servem como base para os testes |
| **Riscos e conting√™ncias** | Projetos mais complexos ou cr√≠ticos | Identifica√ß√£o de riscos potenciais e planos de mitiga√ß√£o |
| **Execu√ß√£o e relat√≥rios** | Quando o plano precisa detalhar execu√ß√£o/reporting | Procedimentos espec√≠ficos para execu√ß√£o e comunica√ß√£o de resultados |
| **Aprova√ß√µes e valida√ß√µes** | Quando o plano precisa de valida√ß√£o formal | Processo formal de aprova√ß√£o por stakeholders |
| **Ap√™ndices** | Quando h√° termos, listas ou documenta√ß√£o complementar | Material de apoio como gloss√°rios, listas detalhadas |
| **Hist√≥rico de mudan√ßas** | Para controlo de vers√µes do plano | Rastreamento de altera√ß√µes e evolu√ß√£o do documento |

## üîÑ Ciclo de Vida do Plano de Testes

### Fases do Ciclo de Vida
1. **In√≠cio** - Criado na fase de planeamento do projeto
2. **Desenvolvimento** - Elaborado com inputs de stakeholders
3. **Revis√£o** - Aprovado antes do in√≠cio dos testes
4. **Execu√ß√£o** - Serve como guia durante os testes
5. **Monitoriza√ß√£o** - Atualizado conforme necess√°rio
6. **Encerramento** - Conclu√≠do ap√≥s os testes e documenta√ß√£o final

### Processo de Desenvolvimento
- **Colabora√ß√£o Multi-disciplinar**: Envolvimento de testadores, desenvolvedores, analistas de neg√≥cio
- **Itera√ß√£o e Refinamento**: Processo iterativo de melhoria com base em feedback
- **Valida√ß√£o Cont√≠nua**: Verifica√ß√£o regular da adequa√ß√£o do plano √†s necessidades do projeto

## ‚úÖ Benef√≠cios de um Bom Plano de Testes

| Benef√≠cio | Descri√ß√£o | Impacto |
|-----------|-----------|---------|
| **Clareza** | Reduz d√∫vidas sobre o que ser√° testado e como | Melhora efici√™ncia da equipa e reduz mal-entendidos |
| **Efici√™ncia** | Evita retrabalho e foca no essencial | Otimiza√ß√£o de recursos e tempo |
| **Gest√£o de Riscos** | Identifica problemas potenciais com anteced√™ncia | Preven√ß√£o proativa de problemas |
| **Comunica√ß√£o** | Alinha expectativas entre stakeholders | Melhora colabora√ß√£o e transpar√™ncia |
| **Rastreabilidade** | Fornece base para auditoria e controlo | Facilita gest√£o e acompanhamento do progresso |

## üß™ Exemplo Pr√°tico: Aplica√ß√£o To-Do List

### üìã Resumo do Sistema
- **Registo/Login**: Autentica√ß√£o com username e password
- **Gest√£o de Tarefas**: Criar, editar, apagar e completar tarefas
- **Visualiza√ß√£o**: Interface com filtros de status (pendente/conclu√≠da)

### üßæ Plano de Testes Estruturado

#### **1. Introdu√ß√£o**
Este plano de testes foi desenvolvido para garantir que todas as funcionalidades da aplica√ß√£o To-Do List funcionem corretamente e atendam aos requisitos especificados. O objetivo √© validar a funcionalidade, usabilidade e confiabilidade da aplica√ß√£o antes do lan√ßamento.

#### **2. Vis√£o Geral**
- **Objetivo**: Validar funcionalidades principais atrav√©s de testes funcionais e n√£o-funcionais
- **Escopo**: Inclui funcionalidades de login, gest√£o completa de tarefas e sistema de visualiza√ß√£o com filtros
- **Per√≠odo**: 4 semanas de atividades de teste
- **Equipa**: 2 testadores e 1 programador de apoio

#### **3. Itens de Teste**
- Sistema de registo e autentica√ß√£o de utilizadores
- Funcionalidades CRUD de tarefas (Create, Read, Update, Delete)
- Sistema de marca√ß√£o de tarefas como completas
- Filtros de visualiza√ß√£o por status
- Interface de utilizador e experi√™ncia do utilizador

#### **4. Entreg√°veis**
- **Casos de Teste**: Documenta√ß√£o completa de cen√°rios de teste
- **Scripts Automatizados**: Scripts Selenium para testes repetitivos
- **Relat√≥rios de Execu√ß√£o**: Relat√≥rios di√°rios e semanais de progresso
- **Relat√≥rios de Defeitos**: Documenta√ß√£o detalhada de bugs encontrados
- **Relat√≥rio Final**: Resumo completo dos resultados dos testes

#### **5. Estrat√©gia de Teste**
- **N√≠veis**: Testes unit√°rios, de integra√ß√£o, de sistema e de aceita√ß√£o
- **Tipos**: Testes funcionais (funcionalidades principais) e n√£o-funcionais (performance, usabilidade)
- **Ambientes**: Desenvolvimento, staging e ambiente de produ√ß√£o simulada
- **Abordagem**: Combina√ß√£o de testes manuais e automatizados

#### **6. Cronograma**
- **Semana 1**: Cria√ß√£o de casos de teste e desenvolvimento de scripts
- **Semana 2**: Execu√ß√£o de testes unit√°rios e de integra√ß√£o
- **Semana 3**: Testes de sistema e corre√ß√£o de defeitos cr√≠ticos
- **Semana 4**: Testes de aceita√ß√£o e elabora√ß√£o do relat√≥rio final

#### **7. Recursos Necess√°rios**
- **Recursos Humanos**: 2 testadores qualificados, 1 programador de apoio
- **Infraestrutura**: Servidor staging, ambiente de desenvolvimento local
- **Ferramentas**: Selenium WebDriver, JIRA para gest√£o de defeitos, ferramentas de relat√≥rio
- **Or√ßamento**: Aloca√ß√£o para ferramentas e infraestrutura tempor√°ria

#### **8. Crit√©rios de Entrada/Sa√≠da**
**Crit√©rios de Entrada**:
- Todas as funcionalidades desenvolvidas e integradas
- Ambiente de teste configurado e dispon√≠vel
- Casos de teste aprovados pelos stakeholders

**Crit√©rios de Sa√≠da**:
- Zero defeitos cr√≠ticos em aberto
- 95% dos casos de teste executados com sucesso
- Aprova√ß√£o formal dos stakeholders
- Documenta√ß√£o completa entregue

### üìé Se√ß√µes Opcionais Inclu√≠das

#### **Funcionalidades N√£o Testadas**
- Testes de escalabilidade para milhares de utilizadores simult√¢neos
- Testes de compatibilidade com navegadores legacy (IE)
- Integra√ß√£o com sistemas externos de terceiros

#### **Riscos e Conting√™ncias**
- **Risco**: Ambiente staging pode estar indispon√≠vel
- **Mitiga√ß√£o**: Configura√ß√£o de ambiente local como backup
- **Risco**: Recursos humanos insuficientes
- **Mitiga√ß√£o**: Plano de prioriza√ß√£o de testes cr√≠ticos

#### **Execu√ß√£o e Relat√≥rios**
- **Metodologia**: Testes manuais para casos explorat√≥rios, automatizados para regress√£o
- **Frequ√™ncia de Relat√≥rios**: Relat√≥rios di√°rios de progresso, semanais de status
- **Comunica√ß√£o**: Reuni√µes di√°rias de standup, relat√≥rios finais para stakeholders

#### **Aprova√ß√µes e Valida√ß√µes**
- **Aprova√ß√£o T√©cnica**: Gestor t√©cnico e lead de testes
- **Aprova√ß√£o de Neg√≥cio**: Product owner e stakeholders principais
- **Processo**: Revis√£o formal do plano antes do in√≠cio dos testes

#### **Ap√™ndices**
- **Ap√™ndice A**: Gloss√°rio de termos t√©cnicos
- **Ap√™ndice B**: Lista detalhada de casos de teste
- **Ap√™ndice C**: Configura√ß√µes de ambiente de teste

#### **Hist√≥rico de Vers√µes**
- **v1.0**: Cria√ß√£o inicial do plano (Data: XX/XX/XXXX)
- **v1.1**: Ajustes ap√≥s feedback dos stakeholders (Data: XX/XX/XXXX)
- **v1.2**: Inclus√£o de crit√©rios de aceita√ß√£o refinados (Data: XX/XX/XXXX)

## üéØ Conclus√£o

A cria√ß√£o de um plano de testes robusto seguindo a norma IEEE 29119-3:2021 √© fundamental para o sucesso de qualquer projeto de software. Este documento serve como roadmap para todas as atividades de teste, garantindo que nada seja deixado ao acaso e que todos os stakeholders tenham uma vis√£o clara do que ser√° realizado.

Um plano bem estruturado n√£o apenas melhora a qualidade dos testes, mas tamb√©m facilita a comunica√ß√£o, reduz riscos e otimiza o uso de recursos, contribuindo significativamente para o sucesso do projeto como um todo.
